---
/**
 * 	Button 按钮
 *
 * ------------------------------------------------------------
 *
 * 	Copyright © 2025 湖南大沥网络科技有限公司.
 *
 * 	  author:	木炭(WOODCOAL)
 * 	   email:	i@woodcoal.cn
 * 	homepage:	https://www.hunandali.com/
 *
 * ------------------------------------------------------------
 */

import ICON from './Icon.astro';
import { ClassClear, updateLink } from '../libs';
import type { IExternalLinkAction, IIcon, ILink, ISize } from '../types';
import { APP } from '../config';
import type { Dict } from '@da.li/core-libs';

export interface Props extends IIcon, Omit<ILink, 'size'> {
	/** 按钮类型 */
	type?: 'button' | 'submit' | 'reset';

	/** 按钮变体 */
	variant?: 'default' | 'outline' | 'ghost';

	/** 形状 */
	shape?: 'default' | 'square' | 'pill';

	/** 大小 */
	size?: Exclude<ISize, 'xl'>;

	/** 是否加载中 */
	loading?: boolean;

	/**
	 * 是否允许外部链接
	 * 1. false: 不允许，发现外部链接禁用
	 * 2. true: 允许，发现外部直接使用，不做任何限制
	 * 3. string: 允许，发现外部使用模板地址跳转，模板地址中使用 {url} 占位符，原始网址使用 base64 编码。未使用 {url} 则会直接跳到模板地址。
	 * 4. alert: 允许，但是会弹窗提示手动点击打开。
	 * @default true
	 */
	external?: IExternalLinkAction;
}

const {
	icon = '',
	logo = false,
	text = '',
	theme,
	size,
	href,
	target,
	disabled = false,
	external = APP.EXTERNAL_LINK,
	rotate,
	variant = 'default',
	shape = 'default',
	loading = false,
	class: className,
	...props
} = Astro.props;

const variantClass = variant !== 'default' ? `btn-${variant}` : 'btn';
const themeClass = theme ? `${variantClass}-${theme}` : variantClass;

const classList = ClassClear([
	'btn',
	themeClass,
	size && `btn-${size}`,
	loading && 'btn-loading',
	disabled && 'btn-disabled',
	shape === 'square' && 'btn-square',
	shape === 'pill' && 'btn-pill',
	className
]);

let Element = 'button';
const ElementProps: Dict = {
	...props,
	disabled: disabled || loading,
	class: classList
};

const url = updateLink(href || '', external, APP.WHITELIST_DOMAINS, true);
if (url.enabled) {
	href && ((ElementProps.href = url.url), (Element = 'a'));
	target && (ElementProps.target = target);
} else {
	ElementProps['data-alert-link'] = url.url;
}

// 渲染插槽内容
const slotHtml = (await Astro.slots.render('default'))?.trim();
---

<Element {...ElementProps}>
	<ICON icon={icon} text={slotHtml ? '' : text} logo={logo} rotate={rotate} />
	{slotHtml && <Fragment set:html={slotHtml} />}
</Element>
