---
/**
 *	Dropdown 下拉菜单
 *
 * ------------------------------------------------------------
 *
 * 	Copyright © 2024 湖南大沥网络科技有限公司.
 *
 * 	  author:	木炭(WOODCOAL)
 * 	   email:	i@woodcoal.cn
 * 	homepage:	http://www.hunandali.com/
 *
 * ------------------------------------------------------------
 */

import Icon from './Icon.astro';
import Bagde, { type Props as IBagde } from './Badge.astro';
import type { ILink, ISize } from '../types';
import { ClassClear } from '../libs';
import Button from './Button.astro';
import Link from './Link.astro';

export interface DropdownItem extends ILink {
	/** 分割线 */
	divider?: boolean;

	/** 选中状态 */
	active?: boolean;

	/** 禁用状态 */
	disabled?: boolean;

	/** 右侧 badge 提示 */
	bagde?: IBagde;

	/** 其他样式 */
	class?: string;
}

export interface Props extends Omit<ILink, 'size'> {
	/** 下拉菜单列表,不设置则使用卡片下拉效果 */
	items?: DropdownItem[];

	/** 弹出方向 */
	direction?: 'down' | 'up' | 'start' | 'end';

	/** 按钮大小 */
	size?: Exclude<ISize, 'xl'>;

	/** 拆分按钮 */
	split?: boolean;

	/** 其他样式 */
	class?: string;
}

const {
	icon,
	text,
	theme,
	href,
	target,
	items,
	direction = 'down',
	size,
	split = false,
	class: className,
	...props
} = Astro.props;

const itemClass = (item: DropdownItem) => {
	const classes = ['dropdown-item', item.class];
	if (item.disabled) classes.push('disabled');
	if (item.active) classes.push('active');
	return ClassClear(classes);
};

const classList = ClassClear([`drop${direction}`, split && 'btn-group', className]);
---

<div class={classList} {...props}>
	{
		split ? (
			<>
				<slot name="button">
					<Button
						icon={icon}
						text={text}
						theme={theme}
						href={href}
						target={target}
						size={size}>
						<slot name="text" />
					</Button>
				</slot>
				<Button
					theme={theme}
					class="dropdown-toggle dropdown-toggle-split"
					type="button"
					data-bs-toggle="dropdown"
					aria-expanded="false"
				/>
			</>
		) : (
			<slot name="button">
				<Button
					icon={icon}
					text={text}
					theme={theme}
					href={href}
					target={target}
					size={size}
					class="dropdown-toggle"
					type="button"
					data-bs-toggle="dropdown"
					aria-expanded="false">
					<slot name="text" />
				</Button>
			</slot>
		)
	}

	{
		!items || Astro.slots.has('default') ? (
			<div class="dropdown-menu dropdown-menu-card">
				<slot />
			</div>
		) : (
			<div class="dropdown-menu">
				{items.map((item) => (
					<>
						{item.divider && <div class="dropdown-divider" />}
						{item.href ? (
							<Link class={itemClass(item)} {...item}>
								{item.bagde && <Bagde {...item.bagde} class="ms-auto" />}
							</Link>
						) : (
							<span class="dropdown-header">
								{item.icon && <Icon icon={item.icon} />}
								{item.text}
								{item.bagde && <Bagde {...item.bagde} class="ms-auto" />}
							</span>
						)}
					</>
				))}
			</div>
		)
	}
</div>

<script>
	import '@tabler/core/js/src/dropdown.js';
</script>
